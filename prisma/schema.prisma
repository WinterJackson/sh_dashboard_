// Prisma schema file,

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  userId     String    @id @default(uuid())
  username   String    @unique
  email      String    @unique
  password   String
  roleId     Int
  hospitalId Int
  isActive   Boolean   @default(true)
  lastLogin  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  doctor     Doctor?
  profile    Profile?
  sessions   Session[]
  hospital   Hospital  @relation(fields: [hospitalId], references: [hospitalId])
  role       Role      @relation(fields: [roleId], references: [roleId])
}

model Role {
  roleId      Int    @id @default(autoincrement())
  roleName    String @unique
  description String
  users       User[]
}

model Profile {
  profileId        String    @id @default(uuid())
  userId           String    @unique
  firstName        String
  lastName         String
  gender           String?
  phone            String?
  address          String?
  dateOfBirth      DateTime?
  imageUrl         String?
  nextOfKin        String?
  nextOfKinPhoneNo String?
  emergencyContact String?
  user             User      @relation(fields: [userId], references: [userId])
}

model Doctor {
  doctorId           Int             @id @default(autoincrement())
  userId             String          @unique
  email              String          @unique
  hospitalId         Int             @unique
  departmentId       Int
  serviceId          Int
  name               String
  specialization     String
  status             String
  phoneNumber        String
  workingHours       String
  averageRating      Float
  appointments       Appointment[]
  department         Department      @relation(fields: [departmentId], references: [departmentId])
  hospital           Hospital        @relation(fields: [hospitalId], references: [hospitalId])
  service            Service         @relation(fields: [serviceId], references: [serviceId])
  user               User            @relation(fields: [userId], references: [userId])
  docEarnings        DoctorEarning?
  referrals          DoctorReferral?
}

model Patient {
  patientId           Int                  @id @default(autoincrement())
  hospitalId          Int
  name                String               @unique
  phoneNo             String               @unique
  email               String               @unique
  dateOfBirth         DateTime
  gender              String
  homeAddress         String?
  state               String?
  reasonForConsultation   String
  admissionDate       DateTime?
  dischargeDate       DateTime?
  status              String               // Inpatient or Outpatient
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  appointments        Appointment[]
  appointmentServices AppointmentService[]
  currentBed          Bed?
  hospital            Hospital             @relation(fields: [hospitalId], references: [hospitalId])
  payments            Payment?
  referrals           Referral[]
  serviceUsages       ServiceUsage?
}

model Appointment {
  appointmentId              String               @id @default(uuid())
  doctorId                   Int
  patientId                  Int
  hospitalId                 Int
  appointmentDate            DateTime
  type                       String               // Virtual or Walk In
  action                     String?
  status                     String?
  consultationFee            Float?
  isPaid                     Boolean
  paymentId                  String?
  completed                  Boolean
  isVideoStarted             Boolean
  commissionPercentage       Float?
  appointmentEndAt           DateTime?
  rescheduledDate            DateTime?
  cancellationReason         String?
  appointmentReminderSent    Int?
  appointmentReminderSentLTF DateTime?
  doctorAppointmentNotes     String?
  patientAppointmentNotes    String?
  reasonForVisit             String?
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @updatedAt
  doctor                     Doctor               @relation(fields: [doctorId], references: [doctorId])
  hospital                   Hospital             @relation(fields: [hospitalId], references: [hospitalId])
  patient                    Patient              @relation(fields: [patientId], references: [patientId])
  services                   AppointmentService[]
  payments                   Payment?
}

model DoctorEarning {
  earningsId  String   @id @default(uuid())
  doctorId    Int      @unique
  date        DateTime
  amount      Float
  description String
  doctor      Doctor   @relation(fields: [doctorId], references: [doctorId])
}

model Bed {
  bedId        Int      @id @default(autoincrement())
  hospitalId   Int      @unique
  patientId    Int?     @unique
  type         String
  ward         String
  availability String
  hospital     Hospital @relation(fields: [hospitalId], references: [hospitalId])
  patient      Patient? @relation(fields: [patientId], references: [patientId])
}

model Service {
  serviceId     Int                  @id @default(autoincrement())
  hospitalId    Int
  serviceName   String
  appointments  AppointmentService[]
  departments   DepartmentService[]
  doctors       Doctor[]
  payments      Payment?
  hospital      Hospital             @relation(fields: [hospitalId], references: [hospitalId])
  serviceUsages ServiceUsage?
}

model Department {
  departmentId Int                  @id @default(autoincrement())
  name         String               @unique
  description  String
  services     DepartmentService[]
  doctors      Doctor[]
  hospitals    HospitalDepartment[]
}

model DepartmentService {
  departmentId Int
  serviceId    Int
  price        Float
  department   Department @relation(fields: [departmentId], references: [departmentId])
  service      Service    @relation(fields: [serviceId], references: [serviceId])

  @@id([departmentId, serviceId])
}

model Payment {
  paymentId     String      @id @default(uuid())
  patientId     Int         @unique
  serviceId     Int         @unique
  hospitalId    Int         @unique
  appointmentId String      @unique
  amount        Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  appointment   Appointment @relation(fields: [appointmentId], references: [appointmentId])
  hospital      Hospital    @relation(fields: [hospitalId], references: [hospitalId])
  patient       Patient     @relation(fields: [patientId], references: [patientId])
  service       Service     @relation(fields: [serviceId], references: [serviceId])
}

model AppointmentService {
  appointmentId String
  serviceId     Int
  patientId     Int
  appointment   Appointment @relation(fields: [appointmentId], references: [appointmentId])
  patient       Patient     @relation(fields: [patientId], references: [patientId])
  service       Service     @relation(fields: [serviceId], references: [serviceId])

  @@id([appointmentId, serviceId])
}

model ServiceUsage {
  usageId   String   @id @default(uuid())
  serviceId Int      @unique
  patientId Int      @unique
  date      DateTime
  patient   Patient  @relation(fields: [patientId], references: [patientId])
  service   Service  @relation(fields: [serviceId], references: [serviceId])
}

model Referral {
  referralId            Int      @id @default(autoincrement())
  patientId             Int      @unique
  hospitalId            Int
  date                  DateTime
  type                  String   // External or Internal
  primaryCareProvider   String   // Primary care provider for the patient
  referralAddress       String   // Address of the patient or the primary care provider
  referralPhone         String   // Phone number of the patient or the primary care provider
  reasonForConsultation String   // Reason why patient needs consultation
  diagnosis             String   // Diagnosis of the patient
  physicianName         String   // Name of the referring physician
  physicianDepartment   String   // Department of the referring physician
  physicianSpecialty    String   // Specialty of the referring physician
  physicianEmail        String   // Email of the referring physician
  physicianPhoneNumber  String   // Phone number of the referring physician
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  doctors    DoctorReferral?
  hospital   Hospital?        @relation(fields: [hospitalId], references: [hospitalId])
  patient    Patient          @relation(fields: [patientId], references: [patientId])
}

model DoctorReferral {
  doctorId   Int      @unique
  referralId Int      @unique
  patientId  Int      @unique
  doctor     Doctor   @relation(fields: [doctorId], references: [doctorId])
  referral   Referral @relation(fields: [referralId], references: [referralId])

  @@id([doctorId, referralId, patientId])
}

model Hospital {
  hospitalId   Int                  @id @default(autoincrement())
  name         String
  phone        String               @unique
  email        String               @unique
  country      String
  city         String
  referralCode String?
  website      String?
  logoUrl      String
  appointments Appointment[]
  beds         Bed?
  doctors      Doctor?
  departments  HospitalDepartment[]
  patients     Patient[]
  payments     Payment?
  referrals    Referral[]
  services     Service[]
  users        User[]
}

model HospitalDepartment {
  hospitalId   Int
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [departmentId])
  hospital     Hospital   @relation(fields: [hospitalId], references: [hospitalId])

  @@id([hospitalId, departmentId])
}

model Session {
  sessionId    String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model VerificationToken {
  tokenId    Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
