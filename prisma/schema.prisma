// prisma/schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "nativeDistinct"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  NURSE
  STAFF
}

enum ServiceType {
  HEALTH
  NON_MEDICAL
}

enum NotificationType {
  APPOINTMENT
  SECURITY
  SYSTEM
  GENERAL
}

model User {
  userId              String         @id @default(uuid())
  username            String         @unique
  email               String         @unique
  password            String
  role                Role
  hospitalId          Int?
  isActive            Boolean        @default(true)
  lastLogin           DateTime?
  mustResetPassword   Boolean        @default(false)
  resetToken          String?
  resetTokenExpiry    DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  twoFactorEnabled    Boolean        @default(false)
  autoLogoutTimeout   Int            @default(30) // in minutes
  doctor              Doctor?
  profile             Profile?
  sessions            Session[]
  hospital            Hospital?      @relation(fields: [hospitalId], references: [hospitalId])
  superAdmin          SuperAdmin?
  admin               Admin?
  nurse               Nurse?
  staff               Staff?
  notifications       Notification[]
  notificationSettings NotificationSettings?
}

model NotificationSettings {
  notificationSettingsId                String  @id @default(uuid())
  userId            String  @unique
  appointmentAlerts Boolean @default(true)
  emailAlerts       Boolean @default(true)
  securityAlerts    Boolean @default(true)
  systemUpdates     Boolean @default(true)
  newDeviceLogin    Boolean @default(true)
  user              User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Notification {
  notificationId        String   @id @default(uuid())
  userId    String
  type      NotificationType
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  metadata  Json?    // For storing additional data related to the notification
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Profile {
  profileId        String    @id @default(uuid())
  userId           String    @unique
  firstName        String
  lastName         String
  gender           String?
  phoneNo          String?
  address          String?
  dateOfBirth      DateTime?
  city             String?
  state            String?
  imageUrl         String?
  nextOfKin        String?
  nextOfKinPhoneNo String?
  emergencyContact String?
  user             User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model SuperAdmin {
  superAdminId Int    @id @default(autoincrement())
  userId       String @unique
  user         User   @relation(fields: [userId], references: [userId])
}

model Admin {
  adminId    Int      @id @default(autoincrement())
  userId     String   @unique
  hospitalId Int
  user       User     @relation(fields: [userId], references: [userId])
  hospital   Hospital @relation(fields: [hospitalId], references: [hospitalId])
}

model Specialization {
  specializationId Int      @id @default(autoincrement())
  name      String   @unique
  doctors   Doctor[]
  Nurse Nurse[]
  Staff Staff[]
}

model Doctor {
  doctorId             Int              @id @default(autoincrement())
  userId               String           @unique
  hospitalId           Int
  departmentId         Int
  serviceId            Int?
  specializationId     Int
  about                String?
  qualifications       String?
  status               String // "Online" or "Offline"
  phoneNo              String
  workingHours         String
  averageRating        Float
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  skills               String[]
  bio                  String?
  yearsOfExperience    Int?
  appointments         Appointment[]
  specialization       Specialization @relation(fields: [specializationId], references: [specializationId])
  department           Department       @relation(fields: [departmentId], references: [departmentId])
  hospital             Hospital         @relation(fields: [hospitalId], references: [hospitalId])
  service              Service?         @relation(fields: [serviceId], references: [serviceId])
  user                 User             @relation(fields: [userId], references: [userId], onDelete: Cascade)
  docEarnings          DoctorEarning[]
  referrals            DoctorReferral[]
  docReviews           DoctorReview[]
  docLicenses          DoctorLicense[]
}

model DoctorLicense {
  licenseId String @id @default(uuid())
  doctorId Int
  name String
  licenseNumber String
  issueDate DateTime
  expiryDate DateTime
  issuingAuthority String
  doctor Doctor @relation(fields: [doctorId], references: [doctorId])
}

model DoctorReview {
  reviewId String @id @default(uuid())
  doctorId Int
  patientId Int
  rating Int // 1-5
  comment String?
  createdAt DateTime @default(now())
  doctor Doctor @relation(fields: [doctorId], references: [doctorId])
  patient Patient @relation(fields: [patientId], references: [patientId], onDelete: Cascade)
}

model Nurse {
  nurseId        Int        @id @default(autoincrement())
  userId         String     @unique
  hospitalId     Int
  departmentId   Int
  specializationId Int
  status         String // "Online" or "Offline"
  phoneNo        String
  workingHours   String
  averageRating  Float
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  user           User       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  hospital       Hospital   @relation(fields: [hospitalId], references: [hospitalId])
  department     Department @relation(fields: [departmentId], references: [departmentId])
  specialization Specialization @relation(fields: [specializationId], references: [specializationId])
}

model Staff {
  staffId        Int        @id @default(autoincrement())
  userId         String     @unique
  hospitalId     Int
  departmentId   Int
  specializationId Int
  status         String // "Online" or "Offline"
  phoneNo        String
  workingHours   String
  averageRating  Float
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  user           User       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  hospital       Hospital   @relation(fields: [hospitalId], references: [hospitalId])
  department     Department @relation(fields: [departmentId], references: [departmentId])
  specialization Specialization @relation(fields: [specializationId], references: [specializationId])
}

model Patient {
  patientId             Int                  @id @default(autoincrement())
  hospitalId            Int
  name                  String               @unique
  phoneNo               String               @unique
  email                 String               @unique
  imageUrl              String?
  dateOfBirth           DateTime
  maritalStatus         String?
  gender                String
  occupation            String?
  homeAddress           String?
  state                 String?
  nextOfKinName         String?
  nextOfKinRelationship String?
  nextOfKinHomeAddress  String?
  nextOfKinPhoneNo      String?
  nextOfKinEmail        String?
  reasonForConsultation String
  admissionDate         DateTime?
  dischargeDate         DateTime?
  status                String // Inpatient or Outpatient
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  medicalInformation    MedicalInformation[]
  appointments          Appointment[]
  appointmentServices   AppointmentService[]
  currentBed            Bed[]
  hospital              Hospital             @relation(fields: [hospitalId], references: [hospitalId])
  payments              Payment[]
  referrals             Referral[]
  serviceUsages         ServiceUsage?
  docReviews            DoctorReview[]
}

model MedicalInformation {
  infoId            String   @id @default(uuid())
  patientId         Int      @unique
  height            Float?
  weight            Float?
  bloodGroup        String?
  allergies         String?
  bmi               Float?
  bodyType          String?
  alcohol           Boolean?
  drugs             Boolean?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  patient           Patient  @relation(fields: [patientId], references: [patientId])
}

model Appointment {
  appointmentId              String               @id @default(uuid())
  doctorId                   Int
  patientId                  Int
  hospitalId                 Int
  appointmentDate            DateTime
  type                       String // Virtual or Walk In
  action                     String?
  status                     String? // (Pending, Confirmed, Completed, Cancelled, Rescheduled)
  consultationFee            Float?
  treatment                  String?
  isPaid                     Boolean
  paymentId                  String?
  completed                  Boolean
  isVideoStarted             Boolean
  commissionPercentage       Float?
  appointmentEndAt           DateTime?
  rescheduledDate            DateTime?
  cancellationReason         String?
  pendingReason              String?
  notes                      String?
  appointmentReminderSent    Int?
  appointmentReminderSentLTF DateTime?
  doctorAppointmentNotes     String?
  patientAppointmentNotes    String?
  reasonForVisit             String?
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @updatedAt
  doctor                     Doctor               @relation(fields: [doctorId], references: [doctorId])
  hospital                   Hospital             @relation(fields: [hospitalId], references: [hospitalId])
  patient                    Patient              @relation(fields: [patientId], references: [patientId], onDelete: Cascade)
  services                   AppointmentService[]
  payments                   Payment[]
}

model DoctorEarning {
  earningsId  String   @id @default(uuid())
  doctorId    Int
  date        DateTime
  amount      Float
  description String
  doctor      Doctor   @relation(fields: [doctorId], references: [doctorId])
}

model Bed {
  bedId        Int      @id @default(autoincrement())
  hospitalId   Int
  patientId    Int?
  type         String // ICU, General
  ward         String
  availability String // Occupied or Available
  hospital     Hospital @relation(fields: [hospitalId], references: [hospitalId])
  patient      Patient? @relation(fields: [patientId], references: [patientId], onDelete: Cascade)

  @@unique([hospitalId, patientId])
}

model Hospital {
  hospitalId   Int                  @id @default(autoincrement())
  name         String               @unique
  phone        String               @unique
  email        String               @unique
  country      String
  city         String
  referralCode String?
  website      String?
  logoUrl      String
  appointments Appointment[]
  beds         Bed[]
  doctors      Doctor[]
  nurses       Nurse[]
  departments  HospitalDepartment[]
  patients     Patient[]
  payments     Payment[]
  referrals    Referral[]
  users        User[]
  admins       Admin[]
  staffs       Staff[]
}

model Department {
  departmentId Int                  @id @default(autoincrement())
  name         String               @unique
  description  String
  services     DepartmentService[]
  doctors      Doctor[]
  nurses       Nurse[]
  staff        Staff[]
  hospitals    HospitalDepartment[]
}

model HospitalDepartment {
  hospitalId   Int
  departmentId Int
  hospital     Hospital   @relation(fields: [hospitalId], references: [hospitalId])
  department   Department @relation(fields: [departmentId], references: [departmentId])

  @@unique([hospitalId, departmentId])
}

model Service {
  serviceId     Int                  @id @default(autoincrement())
  serviceName   String
  type          ServiceType          // HEALTH or NON_MEDICAL
  appointments  AppointmentService[]
  departments   DepartmentService[]
  doctors       Doctor[]
  payments      Payment[]
  serviceUsages ServiceUsage?
}

model DepartmentService {
  departmentId Int
  serviceId    Int
  price        Float
  department   Department @relation(fields: [departmentId], references: [departmentId])
  service      Service    @relation(fields: [serviceId], references: [serviceId])

  @@id([departmentId, serviceId])
}

model AppointmentService {
  appointmentId String
  serviceId     Int
  patientId     Int
  appointment   Appointment @relation(fields: [appointmentId], references: [appointmentId])
  patient       Patient     @relation(fields: [patientId], references: [patientId], onDelete: Cascade)
  service       Service     @relation(fields: [serviceId], references: [serviceId])

  @@id([appointmentId, serviceId])
}

model ServiceUsage {
  usageId   String   @id @default(uuid())
  serviceId Int      @unique
  patientId Int      @unique
  date      DateTime
  patient   Patient  @relation(fields: [patientId], references: [patientId], onDelete: Cascade)
  service   Service  @relation(fields: [serviceId], references: [serviceId])
}

model Payment {
  paymentId     String      @id @default(uuid())
  patientId     Int
  serviceId     Int
  hospitalId    Int
  appointmentId String
  amount        Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  appointment   Appointment @relation(fields: [appointmentId], references: [appointmentId])
  hospital      Hospital    @relation(fields: [hospitalId], references: [hospitalId])
  patient       Patient     @relation(fields: [patientId], references: [patientId], onDelete: Cascade)
  service       Service     @relation(fields: [serviceId], references: [serviceId])
}

model Referral {
  referralId            Int      @id @default(autoincrement())
  patientId             Int
  hospitalId            Int
  effectiveDate         DateTime //Date when refferal should take place
  type                  String // External or Internal
  primaryCareProvider   String // Primary care provider for the patient
  referralAddress       String // Address of the patient or the primary care provider
  referralPhone         String // Phone number of the patient or the primary care provider
  reasonForConsultation String // Reason why patient needs consultation
  diagnosis             String // Diagnosis of the patient
  physicianName         String // Name of the referring physician
  physicianDepartment   String // Department of the referring physician
  physicianSpecialty    String // Specialty of the referring physician
  physicianEmail        String // Email of the referring physician
  physicianPhoneNumber  String // Phone number of the referring physician
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  doctors  DoctorReferral[]
  hospital Hospital        @relation(fields: [hospitalId], references: [hospitalId])
  patient  Patient          @relation(fields: [patientId], references: [patientId], onDelete: Cascade)

  @@unique([patientId, hospitalId, effectiveDate, type])
}

model DoctorReferral {
  doctorId   Int
  referralId Int
  patientId  Int
  doctor     Doctor   @relation(fields: [doctorId], references: [doctorId])
  referral   Referral @relation(fields: [referralId], references: [referralId])

  @@id([doctorId, referralId, patientId])
}

model Session {
  sessionId    String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model VerificationToken {
  tokenId    Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RoleConstraints {
  constraintId Int  @id @default(autoincrement())
  role         Role
  count        Int
}