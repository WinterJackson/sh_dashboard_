// prisma/schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "nativeDistinct"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  NURSE
  STAFF
  PATIENT
}

enum ServiceType {
  MEDICAL
  NON_MEDICAL
}

enum NotificationType {
  APPOINTMENT
  SECURITY
  SYSTEM
  GENERAL
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}

enum ConversationStatus {
  ACTIVE
  ARCHIVED
  DELETED
}

enum HospitalType {
  PUBLIC
  PRIVATE
  MISSION
  NGO
  MILITARY
}

enum KEPHLevel {
  LEVEL_1 // Community Health Services
  LEVEL_2 // Primary Care (Dispensaries/Clinics)
  LEVEL_3 // County/Sub-County Hospitals
  LEVEL_4 // County Referral Hospitals
  LEVEL_5 // National Referral Hospitals
}

enum DepartmentType {
  CLINICAL
  SUPPORT
  ADMINISTRATIVE
}

enum ReferralType {
  UPWARD // Lower to higher level
  DOWNWARD // Higher to lower level (back-referral)
  LATERAL // Same level transfer
  EMERGENCY // Urgent referral
}

enum ReferralStatus {
  PENDING
  ACCEPTED
  COMPLETED
  REJECTED
  CANCELLED
}

enum ReferralPriority {
  IMMEDIATE // Within 1 hour
  URGENT // Within 4 hours
  ROUTINE // Within 24 hours
  SCHEDULED // Future date
}

enum ReferralDoctorRole {
  SENDER
  RECEIVER
}

enum BedType {
  ICU
  GENERAL
  MATERNITY
  ISOLATION
  HDU
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum BedAvailability {
  OCCUPIED
  AVAILABLE
}

model User {
  userId                  String                    @id @default(uuid())
  username                String                    @unique
  email                   String                    @unique
  password                String
  role                    Role
  hospitalId              Int?
  isActive                Boolean                   @default(true)
  lastLogin               DateTime?
  mustResetPassword       Boolean                   @default(false)
  resetToken              String?
  resetTokenExpiry        DateTime?
  twoFactorEnabled        Boolean                   @default(false)
  autoLogoutTimeout       Int                       @default(30) // in minutes
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt

  doctor                  Doctor?
  profile                 Profile?
  sessions                Session[]
  hospital                Hospital?                 @relation(fields: [hospitalId], references: [hospitalId])
  superAdmin              SuperAdmin?
  admin                   Admin?
  nurse                   Nurse?
  staff                   Staff?
  patient                 Patient?
  notifications           Notification[]
  notificationSettings    NotificationSettings?
  conversationParticipant ConversationParticipant[]
  message                 Message[]
  notes                   AppointmentNote[]
  uploadedDocuments       ReferralDocument[]

  @@index([hospitalId])
  @@index([role])
  @@index([isActive])
}

model NotificationSettings {
  notificationSettingsId String  @id @default(uuid())
  userId                 String  @unique
  appointmentAlerts      Boolean @default(true)
  emailAlerts            Boolean @default(true)
  securityAlerts         Boolean @default(true)
  systemUpdates          Boolean @default(true)
  newDeviceLogin         Boolean @default(true)
  user                   User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Notification {
  notificationId String           @id @default(uuid())
  userId         String
  type           NotificationType
  message        String
  isRead         Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  metadata       Json? // For storing additional data related to the notification
  actionUrl      String? // Direct URL or action link for the notification

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
  @@index([type])
}

model Profile {
  profileId        String    @id @default(uuid())
  userId           String    @unique
  firstName        String
  lastName         String
  gender           String?
  phoneNo          String?
  address          String?
  dateOfBirth      DateTime?
  cityOrTown       String?
  county           String?
  imageUrl         String?
  nextOfKin        String?
  nextOfKinPhoneNo String?
  emergencyContact String?
  user             User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model SuperAdmin {
  superAdminId Int    @id @default(autoincrement())
  userId       String @unique
  user         User   @relation(fields: [userId], references: [userId])
}

model Admin {
  adminId    Int      @id @default(autoincrement())
  userId     String   @unique
  hospitalId Int
  user       User     @relation(fields: [userId], references: [userId])
  hospital   Hospital @relation(fields: [hospitalId], references: [hospitalId])
}

model Doctor {
  doctorId          Int              @id @default(autoincrement())
  userId            String           @unique
  hospitalId        Int
  departmentId      Int
  specializationId  Int
  qualifications    String?
  status            String // "Online" or "Offline"
  phoneNo           String           @unique
  workingHours      String
  averageRating     Float
  skills            String?
  bio               String?
  yearsOfExperience Int?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  appointments      Appointment[]
  specialization    Specialization   @relation(fields: [specializationId], references: [specializationId])
  department        Department       @relation(fields: [departmentId], references: [departmentId])
  hospital          Hospital         @relation(fields: [hospitalId], references: [hospitalId])
  user              User             @relation(fields: [userId], references: [userId], onDelete: Cascade)
  docEarnings       DoctorEarning[]
  referralsMade     Referral[]       @relation("ReferringDoctor")
  doctorReferrals   ReferralDoctor[]
  docReviews        DoctorReview[]
  docLicenses       DoctorLicense[]

  @@index([hospitalId])
  @@index([departmentId])
}

model DoctorLicense {
  licenseId        String   @id @default(uuid())
  doctorId         Int
  name             String
  licenseNumber    String
  issueDate        DateTime
  expiryDate       DateTime
  issuingAuthority String
  doctor           Doctor   @relation(fields: [doctorId], references: [doctorId])
}

model DoctorReview {
  reviewId  String   @id @default(uuid())
  doctorId  Int
  patientId Int
  rating    Int // 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  doctor    Doctor   @relation(fields: [doctorId], references: [doctorId])
  patient   Patient  @relation(fields: [patientId], references: [patientId], onDelete: Cascade)
}

model Nurse {
  nurseId          Int            @id @default(autoincrement())
  userId           String         @unique
  hospitalId       Int
  departmentId     Int
  specializationId Int
  qualifications    String?
  status           String // "Online" or "Offline"
  phoneNo          String        @unique
  workingHours     String
  averageRating    Float
  skills           String?
  bio              String?
  yearsOfExperience Int?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  user             User           @relation(fields: [userId], references: [userId], onDelete: Cascade)
  hospital         Hospital       @relation(fields: [hospitalId], references: [hospitalId])
  department       Department     @relation(fields: [departmentId], references: [departmentId])
  specialization   Specialization @relation(fields: [specializationId], references: [specializationId])

  @@index([hospitalId])
  @@index([departmentId])
}

model Staff {
  staffId          Int            @id @default(autoincrement())
  userId           String         @unique
  hospitalId       Int
  departmentId     Int
  specializationId Int
  status           String // "Online" or "Offline"
  phoneNo          String        @unique
  workingHours     String
  averageRating    Float
  skills           String?
  bio              String?
  yearsOfExperience Int?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  user             User           @relation(fields: [userId], references: [userId], onDelete: Cascade)
  hospital         Hospital       @relation(fields: [hospitalId], references: [hospitalId])
  department       Department     @relation(fields: [departmentId], references: [departmentId])
  specialization   Specialization @relation(fields: [specializationId], references: [specializationId])

  @@index([hospitalId])
  @@index([departmentId])
}

model Patient {
  patientId             Int                  @id @default(autoincrement())
  userId                String               @unique
  hospitalId            Int
  maritalStatus         String?
  occupation            String?
  nextOfKinName         String?
  nextOfKinRelationship String?
  nextOfKinHomeAddress  String?
  nextOfKinPhoneNo      String?
  nextOfKinEmail        String?
  reasonForConsultation String
  admissionDate         DateTime?
  dischargeDate         DateTime?
  status                String // Inpatient or Outpatient
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  medicalInformation    MedicalInformation[]
  appointments          Appointment[]
  appointmentServices   AppointmentService[]
  currentBed            Bed[]
  hospital              Hospital             @relation(fields: [hospitalId], references: [hospitalId])
  payments              Payment[]
  referrals             Referral[]
  serviceUsages         ServiceUsage[]
  docReviews            DoctorReview[]
  referralDoctors       ReferralDoctor[]

  user User @relation(fields: [userId], references: [userId])

  @@index([hospitalId])
  @@index([status])
}

model Conversation {
  conversationId String             @id @default(uuid())
  appointmentId  String             @unique
  hospitalId     Int
  subject        String?
  status         ConversationStatus @default(ACTIVE)
  lastMessageAt  DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  participants ConversationParticipant[]
  messages     Message[]
  appointment  Appointment?              @relation(fields: [appointmentId], references: [appointmentId])
  hospital     Hospital?                 @relation(fields: [hospitalId], references: [hospitalId])

  @@index([hospitalId])
  @@index([status])
  @@index([lastMessageAt])
}

model ConversationParticipant {
  conversationId  String
  hospitalId      Int
  appointmentId   String
  userId          String
  joinedAt        DateTime @default(now())
  participantRole Role?

  conversation Conversation @relation(fields: [conversationId], references: [conversationId])
  user         User         @relation(fields: [userId], references: [userId])

  @@id([conversationId, userId])
  @@index([joinedAt])
  @@index([hospitalId])
  @@index([appointmentId])
}

model Message {
  messageId      String      @id @default(uuid())
  conversationId String
  hospitalId     Int
  appointmentId  String
  senderId       String
  content        String
  messageType    MessageType @default(TEXT)
  isRead         Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [conversationId])
  sender       User         @relation(fields: [senderId], references: [userId])

  @@index([conversationId])
  @@index([senderId])
  @@index([isRead])
  @@index([hospitalId])
  @@index([appointmentId])
}

model MedicalInformation {
  infoId     String   @id @default(uuid())
  patientId  Int      @unique
  height     Float?
  weight     Float?
  bloodGroup String?
  allergies  String?
  bmi        Float?
  bodyType   String?
  alcohol    Boolean?
  drugs      Boolean?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [patientId])
}

model Appointment {
  appointmentId              String               @id @default(uuid())
  doctorId                   Int
  patientId                  Int
  hospitalId                 Int
  appointmentDate            DateTime
  type                       String // Virtual or Walk In
  action                     String?
  status                     AppointmentStatus // (Pending, Confirmed, Completed, Cancelled, Rescheduled)
  consultationFee            Float?
  treatment                  String?
  isPaid                     Boolean
  paymentId                  String?
  completed                  Boolean
  isVideoStarted             Boolean
  commissionPercentage       Float?
  appointmentEndAt           DateTime?
  rescheduledDate            DateTime?
  cancellationReason         String?
  pendingReason              String?
  diagnosis                  String?
  prescription               String?
  appointmentReminderSent    Int?
  appointmentReminderSentLTF DateTime?
  reasonForVisit             String?
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @updatedAt
  conversation               Conversation?
  doctor                     Doctor               @relation(fields: [doctorId], references: [doctorId])
  hospital                   Hospital             @relation(fields: [hospitalId], references: [hospitalId])
  patient                    Patient              @relation(fields: [patientId], references: [patientId], onDelete: Cascade)
  services                   AppointmentService[]
  payments                   Payment[]
  notes                      AppointmentNote[]

  @@index([hospitalId])
  @@index([patientId])
  @@index([doctorId])
  @@index([status])
}

model AppointmentNote {
  appointmentNoteId String   @id @default(uuid())
  appointmentId     String
  hospitalId        Int
  authorId          String
  authorRole        Role
  content           String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  appointment Appointment @relation(fields: [appointmentId], references: [appointmentId])
  author      User        @relation(fields: [authorId], references: [userId])
  hospital    Hospital    @relation(fields: [hospitalId], references: [hospitalId])

  @@index([appointmentId])
  @@index([authorId])
  @@index([hospitalId])
}

model DoctorEarning {
  earningsId  String   @id @default(uuid())
  doctorId    Int
  date        DateTime
  amount      Float
  description String
  doctor      Doctor   @relation(fields: [doctorId], references: [doctorId])
}

model BedCapacity {
  bedCapacityId         String   @id @default(uuid())
  hospitalId            Int
  totalInpatientBeds    Int // Total number of inpatient beds (aggregate)
  generalInpatientBeds  Int // General inpatient beds count
  cots                  Int // cots available
  maternityBeds         Int // maternity beds
  emergencyCasualtyBeds Int // emergency casualty beds
  intensiveCareUnitBeds Int // Intensive Care Unit beds
  highDependencyUnitBeds Int // High Dependency Unit beds
  isolationBeds         Int // Isolation beds
  generalSurgicalTheatres   Int?
  maternitySurgicalTheatres Int?

  hospital              Hospital @relation(fields: [hospitalId], references: [hospitalId])

  @@index([hospitalId])
}

model Bed {
  bedId        Int      @id @default(autoincrement())
  hospitalId   Int
  patientId    Int?
  type         BedType
  ward         String
  availability BedAvailability // Occupied or Available
  hospital     Hospital @relation(fields: [hospitalId], references: [hospitalId])
  patient      Patient? @relation(fields: [patientId], references: [patientId], onDelete: Cascade)

  @@unique([hospitalId, patientId])
  @@index([hospitalId])
  @@index([availability])
}

model Hospital {
  hospitalId                Int           @id @default(autoincrement())
  hospitalName              String        @unique
  hospitalLink              String?       @unique
  phone                     String?       @unique
  email                     String?       @unique
  kephLevel                 KEPHLevel?
  regulatoryBody            String?
  hospitalType              HospitalType?
  facilityType              String?
  nhifAccreditation         String?
  open24Hours               String?
  openWeekends              String?
  regulated                 String?
  regulationStatus          String?
  regulatingBody            String?
  registrationNumber        String?
  licenseNumber             String?
  category                  String?
  owner                     String?
  county                    String
  subCounty                 String?
  ward                      String?
  latitude                  Float?
  longitude                 Float?
  town                      String?
  streetAddress             String?
  referralCode              String?       @unique
  description               String?
  emergencyPhone            String?
  emergencyEmail            String?
  website                   String?
  logoUrl                   String?
  operatingHours            String?
  nearestLandmark           String?
  plotNumber                String?

  appointments        Appointment[]
  beds                Bed[]
  doctors             Doctor[]
  nurses              Nurse[]
  departments         HospitalDepartment[]
  patients            Patient[]
  payments            Payment[]
  users               User[]
  admins              Admin[]
  staffs              Staff[]
  conversations       Conversation[]
  appointmentNotes    AppointmentNote[]
  bedCapacity         BedCapacity[]
  hospitalServices    HospitalService[]
  appointmentServices AppointmentService[]
  receivedReferrals   Referral[]           @relation("DestinationHospitals")
  sentReferrals       Referral[]           @relation("OriginHospitals")

  @@index([referralCode])
  @@index([hospitalType])
  @@index([kephLevel])
  @@index([county])
}

model Specialization {
  specializationId Int      @id @default(autoincrement())
  name             String   @unique
  description      String?
  doctors          Doctor[]
  Nurse            Nurse[]
  Staff            Staff[]

  departmentLinks DepartmentSpecialization[]
}

model Department {
  departmentId        Int                        @id @default(autoincrement())
  name                String                     @unique
  description         String?
  type                DepartmentType
  hospitalServices    HospitalService[] // Back relation to services via hospital
  doctors             Doctor[]
  nurses              Nurse[]
  staff               Staff[]
  hospitals           HospitalDepartment[]
  appointmentServices AppointmentService[]
  specializationLinks DepartmentSpecialization[]
}

model DepartmentSpecialization {
  departmentId     Int
  specializationId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  department     Department     @relation(fields: [departmentId], references: [departmentId])
  specialization Specialization @relation(fields: [specializationId], references: [specializationId])

  @@id([departmentId, specializationId])
}

model HospitalDepartment {
  hospitalId       Int
  departmentId     Int
  headOfDepartment String?
  contactEmail     String?
  contactPhone     String?
  location         String?
  establishedYear  Int?
  description      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  hospital   Hospital   @relation(fields: [hospitalId], references: [hospitalId])
  department Department @relation(fields: [departmentId], references: [departmentId])

  @@unique([hospitalId, departmentId])
}

model Service {
  serviceId     Int                  @id @default(autoincrement())
  serviceName   String
  type          ServiceType // MEDICAL or NON_MEDICAL
  appointments  AppointmentService[]
  payments      Payment[]
  serviceUsages ServiceUsage[]

  hospitalServices HospitalService[]

  @@index([serviceName])
  @@index([type])
}

model HospitalService {
  hospitalId            Int
  serviceId             Int
  departmentId          Int // Categorizes the service according to the independent Department table
  maxAppointmentsPerDay Int? // Daily capacity limit
  requiresReferral      Boolean  @default(false) // Referral required?
  isWalkInAllowed       Boolean  @default(true) // Can patients walk in?
  basePrice             Float?
  discount              Float?
  equipmentRequired     String?
  minStaffRequired      Int? // Minimum staff required
  duration              Int?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  hospital   Hospital   @relation(fields: [hospitalId], references: [hospitalId])
  service    Service    @relation(fields: [serviceId], references: [serviceId])
  department Department @relation(fields: [departmentId], references: [departmentId])

  @@id([hospitalId, serviceId])
  @@index([departmentId])
}

model AppointmentService {
  appointmentId String
  hospitalId    Int
  patientId     Int
  serviceId     Int
  departmentId  Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  appointment Appointment @relation(fields: [appointmentId], references: [appointmentId])
  patient     Patient     @relation(fields: [patientId], references: [patientId], onDelete: Cascade)
  service     Service?    @relation(fields: [serviceId], references: [serviceId])
  department  Department? @relation(fields: [departmentId], references: [departmentId])
  hospital    Hospital    @relation(fields: [hospitalId], references: [hospitalId])

  @@id([appointmentId, serviceId])
  @@index([appointmentId, serviceId])
  @@index([patientId, serviceId])
}

model ServiceUsage {
  usageId       String @id @default(uuid())
  appointmentId String
  serviceId     Int
  patientId     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [patientId], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [serviceId])

  @@index([patientId, serviceId, updatedAt])
}

model Payment {
  paymentId     String      @id @default(uuid())
  patientId     Int
  serviceId     Int
  hospitalId    Int
  appointmentId String
  amount        Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  appointment   Appointment @relation(fields: [appointmentId], references: [appointmentId])
  hospital      Hospital    @relation(fields: [hospitalId], references: [hospitalId])
  patient       Patient     @relation(fields: [patientId], references: [patientId], onDelete: Cascade)
  service       Service     @relation(fields: [serviceId], references: [serviceId])

  @@index([serviceId])
  @@index([patientId])
}

model Referral {
  referralId            Int              @id @default(autoincrement())
  patientId             Int
  referringDoctorId     Int // Doctor ID for referring doctor
  originHospitalId      Int
  destinationHospitalId Int
  previousReferralId    Int? // For referral chains
  type                  ReferralType
  status                ReferralStatus   @default(PENDING)
  priority              ReferralPriority @default(ROUTINE)
  effectiveDate         DateTime // Date when referral should take place
  urgency               String? // High, Medium, Low
  isTransportRequired   Boolean          @default(false)
  diagnosis             String?
  outcomeStatus         String? // Completed, Transferred, Deceased
  outcomeNotes          String?
  closedAt              DateTime?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt

  patient             Patient            @relation(fields: [patientId], references: [patientId], onDelete: Cascade)
  originHospital      Hospital           @relation("OriginHospitals", fields: [originHospitalId], references: [hospitalId])
  destinationHospital Hospital           @relation("DestinationHospitals", fields: [destinationHospitalId], references: [hospitalId])
  referringDoctor     Doctor             @relation("ReferringDoctor", fields: [referringDoctorId], references: [doctorId])
  previousReferral    Referral?          @relation("ReferralChain", fields: [previousReferralId], references: [referralId])
  nextReferrals       Referral[]         @relation("ReferralChain")
  documents           ReferralDocument[]
  doctors             ReferralDoctor[]
  transportation      Transportation[]

  @@unique([patientId, originHospitalId, destinationHospitalId, effectiveDate])
  @@index([patientId])
  @@index([originHospitalId])
  @@index([destinationHospitalId])
  @@index([type])
  @@index([status, priority])
  @@index([referringDoctorId])
  @@index([previousReferralId])
  @@index([priority, effectiveDate])
}

model ReferralDocument {
  referralDocId        String   @id @default(uuid())
  referralId           Int
  fileName             String
  fileType             String // "pdf", "jpg", "jpeg", "png"
  fileSize             Int // bytes
  fileData             Bytes // file content
  uploadedAt           DateTime @default(now())
  uploadedBy           String // User ID of uploader
  isEncrypted          Boolean  @default(false)
  initializationVector String? // Initialization vector for encryption
  accessLog            Json? // Track who accessed the document

  referral Referral @relation(fields: [referralId], references: [referralId])
  uploader User     @relation(fields: [uploadedBy], references: [userId])

  @@index([referralId])
  @@index([fileType])
  @@index([uploadedAt])
}

model ReferralDoctor {
  doctorId     Int
  referralId   Int
  patientId    Int
  previousReferralId   Int?
  referralRole ReferralDoctorRole // SENDER or RECEIVER

  doctor   Doctor   @relation(fields: [doctorId], references: [doctorId])
  referral Referral @relation(fields: [referralId], references: [referralId])
  patient  Patient  @relation(fields: [patientId], references: [patientId])

  @@id([doctorId, referralId, patientId])
}

model Transportation {
  transportationId       String    @id @default(uuid())
  referralId             Int?
  patientId              Int?
  ambulanceRegNo         String?
  driverName             String?
  driverContact          String?
  emergencyCallerPhoneNo String? // Caller who requested the emergency ambulance transport
  pickupLocation         String // Description or address of the pickup location
  dropoffLocation        String? // Address or description of dropoff location (optional if emergency pickup)
  pickupTime             DateTime? // Timestamp when pickup occurred
  dropoffTime            DateTime? // Timestamp when dropoff occurred
  cost                   Float?
  status                 String // "Pending", "En Route", "Arrived", "Completed", "Cancelled", "Delayed"
  notes                  String? // Additional notes or observations during Transportation
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  referral               Referral? @relation(fields: [referralId], references: [referralId])

  @@index([referralId])
  @@index([status])
  @@index([pickupTime])
}

model Session {
  sessionId    String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model VerificationToken {
  tokenId    Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RoleConstraints {
  constraintId Int  @id @default(autoincrement())
  role         Role
  count        Int
}
