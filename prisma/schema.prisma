// prisma/schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  NURSE
  STAFF
}

model User {
  userId     String      @id @default(uuid())
  username   String      @unique
  email      String      @unique
  password   String
  role       Role
  hospitalId Int?
  isActive   Boolean     @default(true)
  lastLogin  DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  doctor     Doctor?
  profile    Profile?
  sessions   Session[]
  hospital   Hospital?   @relation(fields: [hospitalId], references: [hospitalId])
  superAdmin SuperAdmin?
  admin      Admin?
  nurse      Nurse?
  staff      Staff?
}

model Profile {
  profileId        String    @id @default(uuid())
  userId           String    @unique
  firstName        String
  lastName         String
  gender           String?
  phoneNo          String?
  address          String?
  dateOfBirth      DateTime?
  imageUrl         String?
  nextOfKin        String?
  nextOfKinPhoneNo String?
  emergencyContact String?
  user             User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model SuperAdmin {
  superAdminId Int    @id @default(autoincrement())
  userId       String @unique
  user         User   @relation(fields: [userId], references: [userId])
}

model Admin {
  adminId    Int      @id @default(autoincrement())
  userId     String   @unique
  hospitalId Int
  user       User     @relation(fields: [userId], references: [userId])
  hospital   Hospital @relation(fields: [hospitalId], references: [hospitalId])
}

model Doctor {
  doctorId       Int              @id @default(autoincrement())
  userId         String           @unique
  hospitalId     Int
  departmentId   Int
  serviceId      Int
  specialization String
  status         String
  phoneNo        String
  workingHours   String
  averageRating  Float
  appointments   Appointment[]
  department     Department       @relation(fields: [departmentId], references: [departmentId])
  hospital       Hospital         @relation(fields: [hospitalId], references: [hospitalId])
  service        Service?         @relation(fields: [serviceId], references: [serviceId])
  user           User             @relation(fields: [userId], references: [userId], onDelete: Cascade)
  docEarnings    DoctorEarning[]
  referrals      DoctorReferral[]
}

model Nurse {
  nurseId        Int        @id @default(autoincrement())
  userId         String     @unique
  hospitalId     Int
  departmentId   Int
  specialization String
  status         String // "Online" or "Offline"
  phoneNo        String
  workingHours   String
  averageRating  Float
  user           User       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  hospital       Hospital   @relation(fields: [hospitalId], references: [hospitalId])
  department     Department @relation(fields: [departmentId], references: [departmentId])
}

model Staff {
  staffId        Int        @id @default(autoincrement())
  userId         String     @unique
  hospitalId     Int
  departmentId   Int
  specialization String
  status         String // "Online" or "Offline"
  phoneNo        String
  workingHours   String
  averageRating  Float
  user           User       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  hospital       Hospital   @relation(fields: [hospitalId], references: [hospitalId])
  department     Department @relation(fields: [departmentId], references: [departmentId])
}

model Patient {
  patientId             Int                  @id @default(autoincrement())
  hospitalId            Int
  name                  String               @unique
  phoneNo               String               @unique
  email                 String               @unique
  dateOfBirth           DateTime
  gender                String
  homeAddress           String?
  state                 String?
  reasonForConsultation String
  admissionDate         DateTime?
  dischargeDate         DateTime?
  status                String // Inpatient or Outpatient
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @default(now()) @updatedAt
  appointments          Appointment[]
  appointmentServices   AppointmentService[]
  currentBed            Bed[]
  hospital              Hospital             @relation(fields: [hospitalId], references: [hospitalId])
  payments              Payment[]
  referrals             Referral[]
  serviceUsages         ServiceUsage?
}

model Appointment {
  appointmentId              String               @id @default(uuid())
  doctorId                   Int
  patientId                  Int
  hospitalId                 Int
  appointmentDate            DateTime
  type                       String // Virtual or Walk In
  action                     String?
  status                     String? // (Pending, Confirmed, Completed, Cancelled, Rescheduled)
  consultationFee            Float?
  isPaid                     Boolean
  paymentId                  String?
  completed                  Boolean
  isVideoStarted             Boolean
  commissionPercentage       Float?
  appointmentEndAt           DateTime?
  rescheduledDate            DateTime?
  cancellationReason         String?
  pendingReason              String?
  appointmentReminderSent    Int?
  appointmentReminderSentLTF DateTime?
  doctorAppointmentNotes     String?
  patientAppointmentNotes    String?
  reasonForVisit             String?
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @updatedAt
  doctor                     Doctor               @relation(fields: [doctorId], references: [doctorId])
  hospital                   Hospital             @relation(fields: [hospitalId], references: [hospitalId])
  patient                    Patient              @relation(fields: [patientId], references: [patientId])
  services                   AppointmentService[]
  payments                   Payment[]
}

model DoctorEarning {
  earningsId  String   @id @default(uuid())
  doctorId    Int
  date        DateTime
  amount      Float
  description String
  doctor      Doctor   @relation(fields: [doctorId], references: [doctorId])
}

model Bed {
  bedId        Int      @id @default(autoincrement())
  hospitalId   Int
  patientId    Int?
  type         String // ICU, General
  ward         String
  availability String // Occupied or Available
  hospital     Hospital @relation(fields: [hospitalId], references: [hospitalId])
  patient      Patient? @relation(fields: [patientId], references: [patientId])

  @@unique([hospitalId, patientId])
}

model Hospital {
  hospitalId   Int                  @id @default(autoincrement())
  name         String               @unique
  phone        String               @unique
  email        String               @unique
  country      String
  city         String
  referralCode String?
  website      String?
  logoUrl      String
  appointments Appointment[]
  beds         Bed[]
  doctors      Doctor[]
  nurses       Nurse[]
  departments  HospitalDepartment[]
  patients     Patient[]
  payments     Payment[]
  referrals    Referral[]
  users        User[]
  admins       Admin[]
  staffs       Staff[]
}

model Department {
  departmentId Int                  @id @default(autoincrement())
  name         String               @unique
  description  String
  services     DepartmentService[]
  doctors      Doctor[]
  nurses       Nurse[]
  staff        Staff[]
  hospitals    HospitalDepartment[]
}

model HospitalDepartment {
  hospitalId   Int
  departmentId Int
  hospital     Hospital   @relation(fields: [hospitalId], references: [hospitalId])
  department   Department @relation(fields: [departmentId], references: [departmentId])

  @@unique([hospitalId, departmentId])
}

model Service {
  serviceId     Int                  @id @default(autoincrement())
  serviceName   String
  appointments  AppointmentService[]
  departments   DepartmentService[]
  doctors       Doctor[]
  payments      Payment[]
  serviceUsages ServiceUsage?
}

model DepartmentService {
  departmentId Int
  serviceId    Int
  price        Float
  department   Department @relation(fields: [departmentId], references: [departmentId])
  service      Service    @relation(fields: [serviceId], references: [serviceId])

  @@id([departmentId, serviceId])
}

model AppointmentService {
  appointmentId String
  serviceId     Int
  patientId     Int
  appointment   Appointment @relation(fields: [appointmentId], references: [appointmentId])
  patient       Patient     @relation(fields: [patientId], references: [patientId])
  service       Service     @relation(fields: [serviceId], references: [serviceId])

  @@id([appointmentId, serviceId])
}

model ServiceUsage {
  usageId   String   @id @default(uuid())
  serviceId Int      @unique
  patientId Int      @unique
  date      DateTime
  patient   Patient  @relation(fields: [patientId], references: [patientId])
  service   Service  @relation(fields: [serviceId], references: [serviceId])
}

model Payment {
  paymentId     String      @id @default(uuid())
  patientId     Int
  serviceId     Int
  hospitalId    Int
  appointmentId String
  amount        Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  appointment   Appointment @relation(fields: [appointmentId], references: [appointmentId])
  hospital      Hospital    @relation(fields: [hospitalId], references: [hospitalId])
  patient       Patient     @relation(fields: [patientId], references: [patientId])
  service       Service     @relation(fields: [serviceId], references: [serviceId])
}

model Referral {
  referralId            Int      @id @default(autoincrement())
  patientId             Int
  hospitalId            Int
  effectiveDate         DateTime //Date when refferal should take place
  type                  String // External or Internal
  primaryCareProvider   String // Primary care provider for the patient
  referralAddress       String // Address of the patient or the primary care provider
  referralPhone         String // Phone number of the patient or the primary care provider
  reasonForConsultation String // Reason why patient needs consultation
  diagnosis             String // Diagnosis of the patient
  physicianName         String // Name of the referring physician
  physicianDepartment   String // Department of the referring physician
  physicianSpecialty    String // Specialty of the referring physician
  physicianEmail        String // Email of the referring physician
  physicianPhoneNumber  String // Phone number of the referring physician
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  doctors  DoctorReferral[]
  hospital Hospital        @relation(fields: [hospitalId], references: [hospitalId])
  patient  Patient          @relation(fields: [patientId], references: [patientId])

  @@unique([patientId, hospitalId, effectiveDate, type])
}

model DoctorReferral {
  doctorId   Int
  referralId Int
  patientId  Int
  doctor     Doctor   @relation(fields: [doctorId], references: [doctorId])
  referral   Referral @relation(fields: [referralId], references: [referralId])

  @@id([doctorId, referralId, patientId])
}

model Session {
  sessionId    String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model VerificationToken {
  tokenId    Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RoleConstraints {
  constraintId Int  @id @default(autoincrement())
  role         Role
  count        Int
}
